# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from typing import Tuple
from PyQt5 import QtCore, QtGui, QtWidgets
import networkx as nx
import matplotlib.pyplot as plt
import random

G = None
graph_path = []
edges = []
graph = None

G=nx.Graph()
edges = []

class Ui_MainWindow(object):

    #######################################################
    # FUNÇÃO QUE DECLARA ELEMENTOS DA INTERFACE           #
    #######################################################
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(400, 500)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(400, 500))
        MainWindow.setMaximumSize(QtCore.QSize(400, 500))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../../../../../Downloads/favicon.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.save_image_button = QtWidgets.QPushButton(self.centralwidget)
        self.save_image_button.setGeometry(QtCore.QRect(178, 390, 101, 31))
        self.save_image_button.setObjectName("save_image_button")
        self.run_algorithm_button = QtWidgets.QPushButton(self.centralwidget)
        self.run_algorithm_button.setGeometry(QtCore.QRect(10, 350, 271, 31))
        self.run_algorithm_button.setObjectName("run_algorithm_button")
        self.generate_graph_button = QtWidgets.QPushButton(self.centralwidget)
        self.generate_graph_button.setGeometry(QtCore.QRect(10, 390, 161, 31))
        self.generate_graph_button.setObjectName("generate_graph_button")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 10, 381, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(10, 40, 380, 21))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(10, 60, 381, 21))
        self.label_7.setObjectName("label_7")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(10, 80, 381, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_5.setAutoFillBackground(False)
        self.label_5.setStyleSheet("")
        self.label_5.setObjectName("label_5")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setEnabled(True)
        self.label_4.setGeometry(QtCore.QRect(10, 200, 101, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        self.label_4.setObjectName("label_4")
        self.number_of_vertices_input = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.number_of_vertices_input.setGeometry(QtCore.QRect(120, 150, 161, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.number_of_vertices_input.sizePolicy().hasHeightForWidth())
        self.number_of_vertices_input.setSizePolicy(sizePolicy)
        self.number_of_vertices_input.setObjectName("number_of_vertices_input")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(10, 150, 101, 31))
        self.label_3.setObjectName("label_3")
        self.field_input_vertices_input = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.field_input_vertices_input.setGeometry(QtCore.QRect(120, 200, 161, 81))
        self.field_input_vertices_input.setObjectName("field_input_vertices_input")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 300, 101, 31))
        self.label_2.setObjectName("label_2")
        self.field_input_path_input = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.field_input_path_input.setGeometry(QtCore.QRect(120, 300, 161, 31))
        self.field_input_path_input.setObjectName("field_input_path_input")
        self.randomize_value_path = QtWidgets.QPushButton(self.centralwidget)
        self.randomize_value_path.setGeometry(QtCore.QRect(290, 300, 75, 31))
        self.randomize_value_path.setObjectName("randomize_value_path")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(10, 100, 381, 21))
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(10, 120, 381, 21))
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(10, 430, 381, 21))
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(10, 460, 381, 21))
        self.label_11.setObjectName("label_11")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.run_algorithm_button.clicked.connect(self.onClick_bestfs)
        self.generate_graph_button.clicked.connect(self.onClick_generateGraph)
        self.save_image_button.clicked.connect(self.onClick_saveGraph)
        self.randomize_value_path.clicked.connect(self.onClick_randomizePath)

        self.generate_graph_button.setEnabled(False)
        self.save_image_button.setEnabled(False)        

    ########################################################
    # FUNÇÃO QUE SETA OS VALORES INICIAIS PARA A INTERFACE #
    ########################################################
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Best First Search Algorithm"))
        self.save_image_button.setText(_translate("MainWindow", "Save Image"))
        self.run_algorithm_button.setText(_translate("MainWindow", "Run Algorithm Best First Search"))
        self.generate_graph_button.setText(_translate("MainWindow", "Generate graph with path"))
        self.randomize_value_path.setText(_translate("MainWindow", "Rand. Value"))
        self.label.setText(_translate("MainWindow", "Instructions:"))
        self.label_6.setText(_translate("MainWindow", "First, enter the number of vertices of the graph in the Number of Vertices field."))
        self.label_7.setText(_translate("MainWindow", "The enter values for the vertices as follows in the Input vertices field:"))
        self.label_5.setText(_translate("MainWindow", "(out_vertex,in_vertex,cost)"))
        self.label_4.setText(_translate("MainWindow", "Input vertices"))
        self.number_of_vertices_input.setPlainText(_translate("MainWindow", "13"))
        self.label_3.setText(_translate("MainWindow", "Number of Vertices:"))
        self.field_input_vertices_input.setPlainText(_translate("MainWindow", "(0, 1, 3)\n"
                                                                "(0, 2, 6)\n"
                                                                "(0, 3, 5)\n"
                                                                "(1, 4, 9)\n"
                                                                "(1, 5, 8)\n"
                                                                "(2, 6, 12)\n"
                                                                "(2, 7, 14)\n"
                                                                "(3, 8, 7)\n"
                                                                "(8, 9, 5)\n"
                                                                "(8, 10, 6)\n"
                                                                "(9, 11, 1)\n"
                                                                "(9, 12, 10)\n"
                                                                "(9, 13, 2)"))
        self.label_2.setText(_translate("MainWindow", "Input path:"))
        self.field_input_path_input.setPlainText(_translate("MainWindow", "(0, 9)"))
        self.label_8.setText(_translate("MainWindow", "Then enter the values ​​of the exit and arrival vertices of the path in the"))
        self.label_9.setText(_translate("MainWindow", " Input path field."))
        self.label_10.setText(_translate("MainWindow", "Total Cost: "))
        self.label_11.setText(_translate("MainWindow", "Path: "))

    ########################################################
    # FUNÇÃO EXECUTADA AO CLICAR NO BOTÃO DE RUN ALGORITHM #
    ########################################################
    def onClick_bestfs(self):
        #print("clicou")
        number_vertices = self.number_of_vertices_input.toPlainText()
        global graph, graph_path
        graph = [[] for i in range(int(number_vertices))]
        one_edge = self.field_input_vertices_input.toPlainText()
        split_input = one_edge.split('\n')
        #print(split_input)
        for x in split_input:
            y = x.replace('(', '')
            y = y.replace(')','')
            y = y.replace(' ','')
            print(y)
            split_edges = y.split(',')
            self.addedge(int(split_edges[0]), int(split_edges[1]), int(split_edges[2]))
        #print(graph)
        path_to_walk = self.field_input_path_input.toPlainText()
        path_to_walk = path_to_walk.replace('(','')
        path_to_walk = path_to_walk.replace(')','')
        path_to_walk = path_to_walk.replace(' ', '')
        path_to_walk = path_to_walk.split(',')
        #print(path_to_walk)
        graph_path = self.best_first_search((int(path_to_walk[0]),int(path_to_walk[1])))
        self.label_10.setText("Total Cost: " + str(graph_path.pop(-1)))
        self.label_11.setText("Path: " + str(graph_path))
        self.generate_graph_button.setEnabled(True)
    
    #######################################################
    # FUNÇÃO EXECUTADA AO CLICAR NO BOTÃO GENERATE GRAPH  #
    #######################################################
    def onClick_generateGraph(self):
        self.draw_graph()
        self.save_image_button.setEnabled(True)

    #######################################################
    # FUNÇÃO EXECUTADA AO CLICAR NO BOTÃO SAVE GRAPH      #
    #######################################################
    def onClick_saveGraph(self):
        self.save_graph()

    #######################################################
    # FUNÇÃO EXECUTADA AO CLICAR EM RAND. VALUE           #
    #######################################################
    def onClick_randomizePath(self):
        x = random.randint(0, 9)
        y = random.randint(x, 9)
        self.field_input_path_input.setPlainText("("+str(x)+", "+str(y)+")")

    #######################################################
    # FUNÇÃO ADICIONA AS ARESTAS DO GRAFO                 #
    #######################################################
    # addedge vincula um vértice ao outro e guarda o valor de custo
    def addedge(self, x, y, cost):
        graph[x].append((y, cost))

        G.add_nodes_from([x,y])
        G.add_edge(x,y)

        edges.append((x,y))
    # deve inserir os dados de (v_partida,v_chegada,custo_caminho)

    ###########################################################
    # Ordena de acordo com o valor de custo da Tupla (y,cost) #
    ###########################################################
    def Sort_Tuple(self, tup): 
        
        # pega o tamanho da lista de tuplas
        lst = len(tup) 
        for i in range(0, lst): 
            
            for j in range(0, lst-i-1): 
                if (tup[j][1] > tup[j + 1][1]): 
                    temp = tup[j] 
                    tup[j]= tup[j + 1] 
                    tup[j + 1]= temp 
        return tup 

    ###########################################################
    #               ALGORITMO BEST FIRST SEARCH               #
    # recebe uma tupla como parâmetro                         #
    # to_path = (vértice_saída, vértice_chegada)              #
    ###########################################################
    def best_first_search(self, to_path):
        visited = []
        to_visit = []
        total_cost = 0

        to_visit.append((to_path[0],total_cost))
        #print(to_visit)
    
        if to_visit[0][0] == to_path[1]:
            #print("to_visit: " + str(to_visit))
            #print("visited: " + str(visited))
            visited.append(to_visit[0][0])
            visited.append(total_cost)
        else:
            while to_visit[0][0] != to_path[1]:
                visited.append(to_visit[0][0])
                total_cost += to_visit[0][1]
                for x in graph[to_visit[0][0]]:
                    to_visit.append(x)
                to_visit.pop(0)
                # Ordena a lista de tuplas de acordo com o 
                # o segundo valor da tupla
                self.Sort_Tuple(to_visit)
            visited.append(to_visit[0][0])
            total_cost+=to_visit[0][1] 
            visited.append(total_cost)

        return visited

    ###########################################################
    # FUNÇÃO QUE CALCULA RETORNA AS ARESTAS DE UM CAMINHO     #
    ###########################################################
    def calc_path_edges(self):
        path_edges=[]
        for x in range(len(graph_path)):
            for y in range(len(edges)):
                if ((graph_path[x] == edges[y][1]) and (edges[y][0] in graph_path)):
                    path_edges.append(edges[y])
        return path_edges

    ###########################################################
    # FUNÇÃO QUE GERA O A IMAGEM DO GRAFO COM OS CAMINHOS     #
    ###########################################################
    def draw_graph(self):
        pos = nx.spring_layout(G)

        path_edges = self.calc_path_edges()

        # Draw nodes and edges not included in path
        nx.draw_networkx_nodes(G, pos, nodelist=set(G.nodes)-set(graph_path))
        nx.draw_networkx_edges(G, pos, edgelist=set(G.edges)-set(path_edges), connectionstyle='arc3, rad = 0.3')
        # Draw nodes and edges included in path
        nx.draw_networkx_nodes(G, pos, nodelist=graph_path, node_color='r')
        nx.draw_networkx_edges(G, pos, edgelist=path_edges, edge_color='r', connectionstyle='arc3, rad = 0.3')

        # Draw labels
        nx.draw_networkx_labels(G,pos)

        #plt.savefig("simple_path.png") # save as png
        plt.show() # display

    ###########################################################
    # FUNÇÃO QUE SALVA A IMAGEM DO GRAFO                      #
    ###########################################################
    def save_graph(self):
        plt.savefig("best_first_search.png")

###########################################################
#                FUNÇÃO MAIN DA INTERFACE                 #
###########################################################
if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
